{"cells":[{"cell_type":"markdown","metadata":{"id":"4iyfrfMgaA-w"},"source":["# Large-scale multi-label text classification\n","\n","**Author:** [Sayak Paul](https://twitter.com/RisingSayak), [Soumik Rakshit](https://github.com/soumik12345)<br>\n","**Date created:** 2020/09/25<br>\n","**Last modified:** 2020/12/23<br>\n","**Description:** Implementing a large-scale multi-label text classification model."]},{"cell_type":"markdown","metadata":{"id":"IVyOnaTwaA-1"},"source":["## Introduction\n","예로서, arXiv 논문의 초록 본문(abstract body)으로 다중 주제를 예측하는 multi-label text classifier를 구축하겠다.\n","\n","This type of classifier can be useful for\n","conference submission portals like [OpenReview](https://openreview.net/). Given a paper\n","abstract, the portal could provide suggestions for which areas the paper would\n","best belong to.\n","\n","The dataset was collected using the\n","[`arXiv` Python library](https://github.com/lukasschwab/arxiv.py)\n","that provides a wrapper around the\n","[original arXiv API](http://arxiv.org/help/api/index).\n","To learn more about the data collection process, please refer to\n","[this notebook](https://github.com/soumik12345/multi-label-text-classification/blob/master/arxiv_scrape.ipynb).\n","Additionally, you can also find the dataset on\n","[Kaggle](https://www.kaggle.com/spsayakpaul/arxiv-paper-abstracts)."]},{"cell_type":"markdown","metadata":{"id":"_479U36haA-2"},"source":["## Imports"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"e9KzZ4wsaA-3","executionInfo":{"status":"ok","timestamp":1664176162672,"user_tz":-540,"elapsed":3349,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}}},"outputs":[],"source":["from tensorflow.keras import layers\n","from tensorflow import keras\n","import tensorflow as tf\n","\n","from sklearn.model_selection import train_test_split\n","from ast import literal_eval\n","\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"ilcZyy-FaA-5"},"source":["## Perform exploratory data analysis\n","\n","In this section, we first load the dataset into a `pandas` dataframe and then perform\n","some basic exploratory data analysis (EDA)."]},{"cell_type":"code","execution_count":2,"metadata":{"id":"byJ7byybaA-6","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1664176164601,"user_tz":-540,"elapsed":1934,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"60153be5-b041-4126-b605-221db68f2cac"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              titles  \\\n","0  Survey on Semantic Stereo Matching / Semantic ...   \n","1  FUTURE-AI: Guiding Principles and Consensus Re...   \n","2  Enforcing Mutual Consistency of Hard Regions f...   \n","3  Parameter Decoupling Strategy for Semi-supervi...   \n","4  Background-Foreground Segmentation for Interio...   \n","\n","                                           summaries  \\\n","0  Stereo matching is one of the widely used tech...   \n","1  The recent advancements in artificial intellig...   \n","2  In this paper, we proposed a novel mutual cons...   \n","3  Consistency training has proven to be an advan...   \n","4  To ensure safety in automated driving, the cor...   \n","\n","                         terms  \n","0           ['cs.CV', 'cs.LG']  \n","1  ['cs.CV', 'cs.AI', 'cs.LG']  \n","2           ['cs.CV', 'cs.AI']  \n","3                    ['cs.CV']  \n","4           ['cs.CV', 'cs.LG']  "],"text/html":["\n","  <div id=\"df-9594027e-2ca5-4823-b251-dcdf88bd988a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>titles</th>\n","      <th>summaries</th>\n","      <th>terms</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Survey on Semantic Stereo Matching / Semantic ...</td>\n","      <td>Stereo matching is one of the widely used tech...</td>\n","      <td>['cs.CV', 'cs.LG']</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>FUTURE-AI: Guiding Principles and Consensus Re...</td>\n","      <td>The recent advancements in artificial intellig...</td>\n","      <td>['cs.CV', 'cs.AI', 'cs.LG']</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Enforcing Mutual Consistency of Hard Regions f...</td>\n","      <td>In this paper, we proposed a novel mutual cons...</td>\n","      <td>['cs.CV', 'cs.AI']</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Parameter Decoupling Strategy for Semi-supervi...</td>\n","      <td>Consistency training has proven to be an advan...</td>\n","      <td>['cs.CV']</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Background-Foreground Segmentation for Interio...</td>\n","      <td>To ensure safety in automated driving, the cor...</td>\n","      <td>['cs.CV', 'cs.LG']</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9594027e-2ca5-4823-b251-dcdf88bd988a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9594027e-2ca5-4823-b251-dcdf88bd988a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9594027e-2ca5-4823-b251-dcdf88bd988a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}],"source":["arxiv_data = pd.read_csv(\n","    \"https://github.com/soumik12345/multi-label-text-classification/releases/download/v0.2/arxiv_data.csv\"\n",")\n","arxiv_data.head()"]},{"cell_type":"code","source":["arxiv_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6qE0AAp-qkMq","executionInfo":{"status":"ok","timestamp":1664176164602,"user_tz":-540,"elapsed":27,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"85cd2d12-bf0f-4bf7-f60f-ddb43d7f60a8"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 51774 entries, 0 to 51773\n","Data columns (total 3 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   titles     51774 non-null  object\n"," 1   summaries  51774 non-null  object\n"," 2   terms      51774 non-null  object\n","dtypes: object(3)\n","memory usage: 1.2+ MB\n"]}]},{"cell_type":"markdown","metadata":{"id":"OG1wXmkGaA-7"},"source":["Our text features are present in the `summaries` column and their corresponding labels\n","are in `terms`. As you can notice, there are multiple categories associated with a\n","particular entry."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"omv7N5GHaA-9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176164602,"user_tz":-540,"elapsed":25,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"ab3fe5a9-07cd-4486-9863-1a5c8b082296"},"outputs":[{"output_type":"stream","name":"stdout","text":["There are 51774 rows in the dataset.\n"]}],"source":["print(f\"There are {len(arxiv_data)} rows in the dataset.\")"]},{"cell_type":"markdown","metadata":{"id":"5SmCRjL7aA--"},"source":["Real-world data is noisy. One of the most commonly observed source of noise is data\n","duplication. Here we notice that our initial dataset has got about 13k duplicate entries."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"6F--tAXUaA_A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176164604,"user_tz":-540,"elapsed":24,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"788273a7-00a2-42ec-97cd-dc2a49afde3f"},"outputs":[{"output_type":"stream","name":"stdout","text":["There are 12802 duplicate titles.\n"]}],"source":["# arxiv_data의 titles 컬럼의 중복여부(True/False)에 대한 합계\n","total_duplicate_titles = sum(arxiv_data[\"titles\"].duplicated())\n","print(f\"There are {total_duplicate_titles} duplicate titles.\")"]},{"cell_type":"markdown","metadata":{"id":"dD8H6G8zaA_B"},"source":["Before proceeding further, we drop these entries."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"fmTsb6szaA_B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176164604,"user_tz":-540,"elapsed":22,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"49e97488-8dea-4e2e-b9bb-95b1be24a91b"},"outputs":[{"output_type":"stream","name":"stdout","text":["There are 38972 rows in the deduplicated dataset.\n","2321\n","3157\n"]}],"source":["arxiv_data = arxiv_data[~arxiv_data[\"titles\"].duplicated()]\n","print(f\"There are {len(arxiv_data)} rows in the deduplicated dataset.\")\n","\n","# There are some terms with occurrence as low as 1.\n","print(sum(arxiv_data[\"terms\"].value_counts() == 1))\n","\n","# How many unique terms?\n","print(arxiv_data[\"terms\"].nunique())"]},{"cell_type":"markdown","metadata":{"id":"GzgUWHuvaA_C"},"source":["As observed above, out of 3,157 unique combinations of `terms`, 2,321 entries have the\n","lowest occurrence. To prepare our train, validation, and test sets with\n","[stratification](https://en.wikipedia.org/wiki/Stratified_sampling), we need to drop\n","these terms."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"VJ0YytTdaA_C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176164605,"user_tz":-540,"elapsed":20,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"6abcfd53-6fb4-47bd-9607-4a3fb3d48bc1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(36651, 3)"]},"metadata":{},"execution_count":7}],"source":["# Filtering the rare terms.\n","arxiv_data_filtered = arxiv_data.groupby(\"terms\").filter(lambda x: len(x) > 1)\n","arxiv_data_filtered.shape"]},{"cell_type":"markdown","source":["- title이 중복된 데이터를 제거\n","- items가 1개 밖에 없는 items에 해당하는 데이터도 제거"],"metadata":{"id":"bO4Pf1r-pa_q"}},{"cell_type":"markdown","metadata":{"id":"4GW7F0UAaA_D"},"source":["## Convert the string labels to lists of strings\n","\n","The initial labels are represented as raw strings. Here we make them `List[str]` for a\n","more compact representation."]},{"cell_type":"code","source":["arxiv_data_filtered[\"terms\"].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uB1P1MlZpxdC","executionInfo":{"status":"ok","timestamp":1664176164606,"user_tz":-540,"elapsed":18,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"afefc858-b945-4a8e-8a03-d0400c0600d9"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0             ['cs.CV', 'cs.LG']\n","1    ['cs.CV', 'cs.AI', 'cs.LG']\n","2             ['cs.CV', 'cs.AI']\n","3                      ['cs.CV']\n","4             ['cs.CV', 'cs.LG']\n","Name: terms, dtype: object"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["print(type(arxiv_data_filtered[\"terms\"][0]))\n","print(arxiv_data_filtered[\"terms\"][0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HW0JxwwFqOoj","executionInfo":{"status":"ok","timestamp":1664176164607,"user_tz":-540,"elapsed":15,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"81fd00ad-6a5d-4fec-9576-d140a3e2d57f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'str'>\n","['cs.CV', 'cs.LG']\n"]}]},{"cell_type":"markdown","source":["literal_eval: \n","- eval과 유사한 동작으로 문자열로 표현된 python 문장을 실행하여 python 객체로 변환하는 함수. \n","- eval과는 독특한 차이점이 있는 것으로 판단됨(시스템 명령어는 제외 등)"],"metadata":{"id":"bbaRKzlEq9RC"}},{"cell_type":"code","execution_count":10,"metadata":{"id":"kXQDCF1PaA_D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176165007,"user_tz":-540,"elapsed":412,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"c5da3d0e-cbe1-4b09-f80c-b761a47cd454"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0           [cs.CV, cs.LG]\n","1    [cs.CV, cs.AI, cs.LG]\n","2           [cs.CV, cs.AI]\n","3                  [cs.CV]\n","4           [cs.CV, cs.LG]\n","Name: terms, dtype: object"]},"metadata":{},"execution_count":10}],"source":["arxiv_data_filtered[\"terms\"] = arxiv_data_filtered[\"terms\"].apply(\n","    lambda x: literal_eval(x)\n",")\n","arxiv_data_filtered[\"terms\"].head()"]},{"cell_type":"code","source":["print(type(arxiv_data_filtered[\"terms\"][0]))\n","print(arxiv_data_filtered[\"terms\"][0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E_LMlRaqqXp6","executionInfo":{"status":"ok","timestamp":1664176165007,"user_tz":-540,"elapsed":5,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"a16509b6-4624-400b-e2e6-0526b5dc0c2c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n","['cs.CV', 'cs.LG']\n"]}]},{"cell_type":"markdown","metadata":{"id":"7u-V3AiNaA_E"},"source":["## Use stratified splits because of class imbalance\n","\n","The dataset has a\n","[class imbalance problem](https://developers.google.com/machine-learning/glossary/#class-imbalanced-dataset).\n","So, to have a fair evaluation result, we need to ensure the datasets are sampled with\n","stratification. To know more about different strategies to deal with the class imbalance\n","problem, you can follow\n","[this tutorial](https://www.tensorflow.org/tutorials/structured_data/imbalanced_data).\n","For an end-to-end demonstration of classification with imbablanced data, refer to\n","[Imbalanced classification: credit card fraud detection](https://keras.io/examples/structured_data/imbalanced_classification/)."]},{"cell_type":"code","execution_count":12,"metadata":{"id":"oHllbY1jaA_F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176165378,"user_tz":-540,"elapsed":373,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"1cc1e7ce-2dfb-4481-8714-e5d234a327f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows in training set: 32985\n","Number of rows in validation set: 1833\n","Number of rows in test set: 1833\n"]}],"source":["test_split = 0.1\n","\n","# Initial train and test split.\n","train_df, test_df = train_test_split(\n","    arxiv_data_filtered,\n","    test_size=test_split,\n","    stratify=arxiv_data_filtered[\"terms\"].values,\n",")\n","\n","# Splitting the test set further into validation\n","# and new test sets.\n","val_df = test_df.sample(frac=0.5)\n","test_df.drop(val_df.index, inplace=True)\n","\n","print(f\"Number of rows in training set: {len(train_df)}\")\n","print(f\"Number of rows in validation set: {len(val_df)}\")\n","print(f\"Number of rows in test set: {len(test_df)}\")"]},{"cell_type":"markdown","metadata":{"id":"kXVq00azaA_F"},"source":["## Multi-label binarization\n","\n","Now we preprocess our labels using the\n","[`StringLookup`](https://keras.io/api/layers/preprocessing_layers/categorical/string_lookup)\n","layer.\n","- item의 출현여부를 나타내는 행렬을 작성할 것이다.\n","- 이를 위해 필요한 첫 작업은 unique한 item을 식별하는 것이다.\n","\n"," [tf.raged.constant](https://www.tensorflow.org/guide/ragged_tensor)를 이용하여 sparce matrix 처럼 동작하도록 해준다."]},{"cell_type":"code","source":["# terms: 2차원 문자열 매트릭스와 같은 형식을 가집니다.\n","terms = tf.ragged.constant(train_df[\"terms\"].values)\n","# one-hot 벡터를 만드는 함수\n","lookup = tf.keras.layers.StringLookup(output_mode=\"multi_hot\")\n","# 학습된 one-hot 벡터를 만드는 함수\n","lookup.adapt(terms)\n","vocab = lookup.get_vocabulary()\n","print(type(vocab))\n","print(len(vocab))\n","vocab"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ke-cOcotv46","executionInfo":{"status":"ok","timestamp":1664176169774,"user_tz":-540,"elapsed":4398,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"d4f50232-666f-4ee2-9c9e-a6a990dc392c"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n","153\n"]},{"output_type":"execute_result","data":{"text/plain":["['[UNK]',\n"," 'cs.CV',\n"," 'cs.LG',\n"," 'stat.ML',\n"," 'cs.AI',\n"," 'eess.IV',\n"," 'cs.RO',\n"," 'cs.CL',\n"," 'cs.NE',\n"," 'cs.CR',\n"," 'math.OC',\n"," 'eess.SP',\n"," 'cs.GR',\n"," 'cs.SI',\n"," 'cs.MM',\n"," 'cs.SY',\n"," 'cs.IR',\n"," 'cs.MA',\n"," 'eess.SY',\n"," 'cs.HC',\n"," 'math.IT',\n"," 'cs.IT',\n"," 'cs.DC',\n"," 'cs.CY',\n"," 'stat.AP',\n"," 'stat.TH',\n"," 'math.ST',\n"," 'stat.ME',\n"," 'eess.AS',\n"," 'cs.SD',\n"," 'q-bio.QM',\n"," 'q-bio.NC',\n"," 'cs.DS',\n"," 'cs.GT',\n"," 'cs.CG',\n"," 'cs.NI',\n"," 'cs.SE',\n"," 'I.2.6',\n"," 'stat.CO',\n"," 'math.NA',\n"," 'cs.NA',\n"," 'physics.chem-ph',\n"," 'cs.DB',\n"," 'q-bio.BM',\n"," 'cs.PL',\n"," 'cs.LO',\n"," 'cond-mat.dis-nn',\n"," '68T45',\n"," 'math.PR',\n"," 'physics.comp-ph',\n"," 'cs.CE',\n"," 'cs.AR',\n"," 'I.2.10',\n"," 'q-fin.ST',\n"," 'cond-mat.stat-mech',\n"," 'math.DS',\n"," 'cs.CC',\n"," '68T05',\n"," 'quant-ph',\n"," 'I.4.6',\n"," 'physics.soc-ph',\n"," 'physics.data-an',\n"," 'physics.ao-ph',\n"," 'cs.DM',\n"," 'q-bio.GN',\n"," 'econ.EM',\n"," 'physics.med-ph',\n"," 'astro-ph.IM',\n"," 'I.4.8',\n"," 'math.AT',\n"," 'cs.PF',\n"," 'cs.FL',\n"," 'I.4',\n"," 'q-fin.TR',\n"," 'I.5.4',\n"," 'I.2',\n"," '68U10',\n"," 'physics.optics',\n"," 'physics.geo-ph',\n"," 'hep-ex',\n"," 'cond-mat.mtrl-sci',\n"," '68T10',\n"," 'physics.flu-dyn',\n"," 'math.AP',\n"," 'I.4; I.5',\n"," 'I.4.9',\n"," 'I.2.6; I.2.8',\n"," 'I.2.10; I.4; I.5',\n"," '68T01',\n"," '65D19',\n"," 'q-fin.CP',\n"," 'nlin.CD',\n"," 'math.CO',\n"," 'cs.MS',\n"," 'I.2.6; I.5.1',\n"," 'I.2.0; I.2.6',\n"," '68T07',\n"," 'cs.SC',\n"," 'cs.ET',\n"," 'K.3.2',\n"," 'I.2; I.5',\n"," 'I.2.8',\n"," 'I.2.10; I.4.8',\n"," '68U01',\n"," '68T30',\n"," 'q-fin.GN',\n"," 'q-fin.EC',\n"," 'q-bio.MN',\n"," 'econ.GN',\n"," 'I.4.9; I.5.4',\n"," 'I.4.5',\n"," 'I.2; I.4; I.5',\n"," 'I.2.6; I.2.7',\n"," '68T99',\n"," '68Q32',\n"," '68',\n"," '62H30',\n"," 'q-fin.RM',\n"," 'q-fin.PM',\n"," 'q-bio.TO',\n"," 'q-bio.OT',\n"," 'physics.bio-ph',\n"," 'nlin.AO',\n"," 'math.LO',\n"," 'math.FA',\n"," 'hep-ph',\n"," 'cond-mat.soft',\n"," 'I.4.6; I.4.8',\n"," 'I.4.4',\n"," 'I.4.3',\n"," 'I.4.0',\n"," 'I.2; J.2',\n"," 'I.2; I.2.6; I.2.7',\n"," 'I.2.7',\n"," 'I.2.6; I.5.4',\n"," 'I.2.6; I.2.9',\n"," 'I.2.6; I.2.7; H.3.1; H.3.3',\n"," 'I.2.6; I.2.10',\n"," 'I.2.6, I.5.4',\n"," 'I.2.1; J.3',\n"," 'I.2.10; I.5.1; I.4.8',\n"," 'I.2.10; I.4.8; I.5.4',\n"," 'I.2.10; I.2.6',\n"," 'I.2.1',\n"," 'H.3.1; I.2.6; I.2.7',\n"," 'H.3.1; H.3.3; I.2.6; I.2.7',\n"," 'G.3',\n"," 'F.2.2; I.2.7',\n"," 'E.5; E.4; E.2; H.1.1; F.1.1; F.1.3',\n"," '68Txx',\n"," '62H99',\n"," '62H35',\n"," '14J60 (Primary) 14F05, 14J26 (Secondary)']"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["a = np.array([[1,3,0], [0,2,6]])\n","a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s-_nyVPPzY25","executionInfo":{"status":"ok","timestamp":1664176169779,"user_tz":-540,"elapsed":56,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"fe69e0c6-4e12-4143-dc56-d44e1cc32731"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 3, 0],\n","       [0, 2, 6]])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["np.argwhere(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CWxZHTDAzh5b","executionInfo":{"status":"ok","timestamp":1664176169780,"user_tz":-540,"elapsed":52,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"da040532-02fc-4805-f13d-93ba8ccc5abe"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0],\n","       [0, 1],\n","       [1, 1],\n","       [1, 2]])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["arxiv_data_filtered[\"terms\"].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ndwHZiDx1D8J","executionInfo":{"status":"ok","timestamp":1664176169780,"user_tz":-540,"elapsed":49,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"f0a5d976-08df-479c-a7a8-cf8e25b1ae76"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0           [cs.CV, cs.LG]\n","1    [cs.CV, cs.AI, cs.LG]\n","2           [cs.CV, cs.AI]\n","3                  [cs.CV]\n","4           [cs.CV, cs.LG]\n","Name: terms, dtype: object"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["vocab으로 one-hot 코딩된 array를 다시 원래의 주제 문자열로 복원하는 함수"],"metadata":{"id":"ZSfvjY7C9DPR"}},{"cell_type":"code","execution_count":17,"metadata":{"id":"c0l9gScuaA_F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176169781,"user_tz":-540,"elapsed":48,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"d4c90377-2347-47f6-f73f-8ec9765281d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Vocabulary:\n","\n","['[UNK]', 'cs.CV', 'cs.LG', 'stat.ML', 'cs.AI', 'eess.IV', 'cs.RO', 'cs.CL', 'cs.NE', 'cs.CR', 'math.OC', 'eess.SP', 'cs.GR', 'cs.SI', 'cs.MM', 'cs.SY', 'cs.IR', 'cs.MA', 'eess.SY', 'cs.HC', 'math.IT', 'cs.IT', 'cs.DC', 'cs.CY', 'stat.AP', 'stat.TH', 'math.ST', 'stat.ME', 'eess.AS', 'cs.SD', 'q-bio.QM', 'q-bio.NC', 'cs.DS', 'cs.GT', 'cs.CG', 'cs.NI', 'cs.SE', 'I.2.6', 'stat.CO', 'math.NA', 'cs.NA', 'physics.chem-ph', 'cs.DB', 'q-bio.BM', 'cs.PL', 'cs.LO', 'cond-mat.dis-nn', '68T45', 'math.PR', 'physics.comp-ph', 'cs.CE', 'cs.AR', 'I.2.10', 'q-fin.ST', 'cond-mat.stat-mech', 'math.DS', 'cs.CC', '68T05', 'quant-ph', 'I.4.6', 'physics.soc-ph', 'physics.data-an', 'physics.ao-ph', 'cs.DM', 'q-bio.GN', 'econ.EM', 'physics.med-ph', 'astro-ph.IM', 'I.4.8', 'math.AT', 'cs.PF', 'cs.FL', 'I.4', 'q-fin.TR', 'I.5.4', 'I.2', '68U10', 'physics.optics', 'physics.geo-ph', 'hep-ex', 'cond-mat.mtrl-sci', '68T10', 'physics.flu-dyn', 'math.AP', 'I.4; I.5', 'I.4.9', 'I.2.6; I.2.8', 'I.2.10; I.4; I.5', '68T01', '65D19', 'q-fin.CP', 'nlin.CD', 'math.CO', 'cs.MS', 'I.2.6; I.5.1', 'I.2.0; I.2.6', '68T07', 'cs.SC', 'cs.ET', 'K.3.2', 'I.2; I.5', 'I.2.8', 'I.2.10; I.4.8', '68U01', '68T30', 'q-fin.GN', 'q-fin.EC', 'q-bio.MN', 'econ.GN', 'I.4.9; I.5.4', 'I.4.5', 'I.2; I.4; I.5', 'I.2.6; I.2.7', '68T99', '68Q32', '68', '62H30', 'q-fin.RM', 'q-fin.PM', 'q-bio.TO', 'q-bio.OT', 'physics.bio-ph', 'nlin.AO', 'math.LO', 'math.FA', 'hep-ph', 'cond-mat.soft', 'I.4.6; I.4.8', 'I.4.4', 'I.4.3', 'I.4.0', 'I.2; J.2', 'I.2; I.2.6; I.2.7', 'I.2.7', 'I.2.6; I.5.4', 'I.2.6; I.2.9', 'I.2.6; I.2.7; H.3.1; H.3.3', 'I.2.6; I.2.10', 'I.2.6, I.5.4', 'I.2.1; J.3', 'I.2.10; I.5.1; I.4.8', 'I.2.10; I.4.8; I.5.4', 'I.2.10; I.2.6', 'I.2.1', 'H.3.1; I.2.6; I.2.7', 'H.3.1; H.3.3; I.2.6; I.2.7', 'G.3', 'F.2.2; I.2.7', 'E.5; E.4; E.2; H.1.1; F.1.1; F.1.3', '68Txx', '62H99', '62H35', '14J60 (Primary) 14F05, 14J26 (Secondary)']\n"]}],"source":["def invert_multi_hot(encoded_labels):\n","    \"\"\"Reverse a single multi-hot encoded label to a tuple of vocab terms.\"\"\"\n","    # np.argwhere(a) : return nezero index with (N, a.ndim) : N is num of non zero items\n","    hot_indices = np.argwhere(encoded_labels == 1.0)[..., 0]\n","    return np.take(vocab, hot_indices)\n","\n","\n","print(\"Vocabulary:\\n\")\n","print(vocab)\n","\n","# print(invert_multi_hot(arxiv_data[\"terms\"][0]))"]},{"cell_type":"code","source":["arxiv_data_filtered[\"terms\"][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i6t8hEZD4LvB","executionInfo":{"status":"ok","timestamp":1664176169782,"user_tz":-540,"elapsed":46,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"ea3a9a07-bf92-4920-b3f9-a62152cad265"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['cs.CV', 'cs.LG']"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["onehoted0 = np.zeros_like(vocab, dtype='float')\n","onehoted0\n","for sub in arxiv_data_filtered[\"terms\"][0]:\n","    for i, item in enumerate(vocab):\n","        if sub == item:\n","            onehoted0[i] = 1\n","onehoted0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w_4nHEAV7fuY","executionInfo":{"status":"ok","timestamp":1664176169782,"user_tz":-540,"elapsed":40,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"7492cd91-fee7-49a1-ac19-a781bb1d0939"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["invert_multi_hot(onehoted0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Aea5H-Ti82lp","executionInfo":{"status":"ok","timestamp":1664176169784,"user_tz":-540,"elapsed":37,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"69fe0ed2-e979-4915-9377-8752a161598d"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['cs.CV', 'cs.LG'], dtype='<U40')"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"loGdUBmZaA_G"},"source":["Here we are separating the individual unique classes available from the label\n","pool and then using this information to represent a given label set with 0's and 1's.\n","Below is an example."]},{"cell_type":"code","execution_count":21,"metadata":{"id":"gAO39zSMaA_G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176169785,"user_tz":-540,"elapsed":34,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"f7cf458f-85fc-40d5-c802-151bd67aefaa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original label: ['cs.LG', 'stat.ML']\n","Label-binarized representation: [[0. 0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n","  0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"]}],"source":["sample_label = train_df[\"terms\"].iloc[0]\n","print(f\"Original label: {sample_label}\")\n","\n","# lookup 함수에는 하나의 데이터를 넣어도 마치 여러 data를 넣은 것처럼 넣어야함. test[0:1]\n","label_binarized = lookup([sample_label])\n","print(f\"Label-binarized representation: {label_binarized}\")"]},{"cell_type":"markdown","metadata":{"id":"cjmvJoVSaA_G"},"source":["## Data preprocessing and `tf.data.Dataset` objects\n","\n","We first get percentile estimates of the sequence lengths. The purpose will be clear in a\n","moment."]},{"cell_type":"code","execution_count":22,"metadata":{"id":"CR7qo_jIaA_H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176170271,"user_tz":-540,"elapsed":515,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"41bce152-dc7b-4caa-d8c7-55fb692e663a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    32985.000000\n","mean       156.593664\n","std         41.556845\n","min          5.000000\n","25%        128.000000\n","50%        155.000000\n","75%        183.000000\n","max        462.000000\n","Name: summaries, dtype: float64"]},"metadata":{},"execution_count":22}],"source":["train_df[\"summaries\"].apply(lambda x: len(x.split(\" \"))).describe()"]},{"cell_type":"markdown","metadata":{"id":"0tFienWGaA_L"},"source":["Notice that 50% of the abstracts have a length of 154 (you may get a different number\n","based on the split). So, any number close to that value is a good enough approximate for the\n","maximum sequence length.\n","\n","Now, we implement utilities to prepare our datasets."]},{"cell_type":"code","execution_count":23,"metadata":{"id":"jVKgHK5caA_M","executionInfo":{"status":"ok","timestamp":1664176170273,"user_tz":-540,"elapsed":9,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}}},"outputs":[],"source":["max_seqlen = 150\n","batch_size = 128\n","padding_token = \"<pad>\"\n","auto = tf.data.AUTOTUNE\n","\n","\n","def make_dataset(dataframe, is_train=True):\n","    labels = tf.ragged.constant(dataframe[\"terms\"].values)\n","    label_binarized = lookup(labels).numpy()\n","    dataset = tf.data.Dataset.from_tensor_slices(\n","        (dataframe[\"summaries\"].values, label_binarized)\n","    )\n","    dataset = dataset.shuffle(batch_size * 10) if is_train else dataset\n","    return dataset.batch(batch_size)\n"]},{"cell_type":"markdown","metadata":{"id":"tzLS8dg-aA_M"},"source":["Now we can prepare the `tf.data.Dataset` objects."]},{"cell_type":"code","execution_count":24,"metadata":{"id":"upop1YOIaA_N","executionInfo":{"status":"ok","timestamp":1664176170909,"user_tz":-540,"elapsed":644,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}}},"outputs":[],"source":["train_dataset = make_dataset(train_df, is_train=True)\n","validation_dataset = make_dataset(val_df, is_train=False)\n","test_dataset = make_dataset(test_df, is_train=False)"]},{"cell_type":"markdown","metadata":{"id":"6L2ORkrzaA_N"},"source":["## Dataset preview"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"sbl3uMXvaA_O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176170909,"user_tz":-540,"elapsed":9,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"914dd558-5c57-4566-ebd6-42b08ca67fdf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Abstract: b'In this paper, we propose $\\\\text{HF}^2$-VAD, a Hybrid framework that\\nintegrates Flow reconstruction and Frame prediction seamlessly to handle Video\\nAnomaly Detection. Firstly, we design the network of ML-MemAE-SC (Multi-Level\\nMemory modules in an Autoencoder with Skip Connections) to memorize normal\\npatterns for optical flow reconstruction so that abnormal events can be\\nsensitively identified with larger flow reconstruction errors. More\\nimportantly, conditioned on the reconstructed flows, we then employ a\\nConditional Variational Autoencoder (CVAE), which captures the high correlation\\nbetween video frame and optical flow, to predict the next frame given several\\nprevious frames. By CVAE, the quality of flow reconstruction essentially\\ninfluences that of frame prediction. Therefore, poorly reconstructed optical\\nflows of abnormal events further deteriorate the quality of the final predicted\\nfuture frame, making the anomalies more detectable. Experimental results\\ndemonstrate the effectiveness of the proposed method. Code is available at\\n\\\\href{https://github.com/LiUzHiAn/hf2vad}{https://github.com/LiUzHiAn/hf2vad}.'\n","Label(s): ['cs.CV']\n"," \n","Abstract: b'To date, there has been no formal study of the statistical cost of\\ninterpretability in machine learning. As such, the discourse around potential\\ntrade-offs is often informal and misconceptions abound. In this work, we aim to\\ninitiate a formal study of these trade-offs. A seemingly insurmountable\\nroadblock is the lack of any agreed upon definition of interpretability.\\nInstead, we propose a shift in perspective. Rather than attempt to define\\ninterpretability, we propose to model the \\\\emph{act} of \\\\emph{enforcing}\\ninterpretability. As a starting point, we focus on the setting of empirical\\nrisk minimization for binary classification, and view interpretability as a\\nconstraint placed on learning. That is, we assume we are given a subset of\\nhypothesis that are deemed to be interpretable, possibly depending on the data\\ndistribution and other aspects of the context. We then model the act of\\nenforcing interpretability as that of performing empirical risk minimization\\nover the set of interpretable hypotheses. This model allows us to reason about\\nthe statistical implications of enforcing interpretability, using known results\\nin statistical learning theory. Focusing on accuracy, we perform a case\\nanalysis, explaining why one may or may not observe a trade-off between\\naccuracy and interpretability when the restriction to interpretable classifiers\\ndoes or does not come at the cost of some excess statistical risk. We close\\nwith some worked examples and some open problems, which we hope will spur\\nfurther theoretical development around the tradeoffs involved in\\ninterpretability.'\n","Label(s): ['cs.LG' 'stat.ML']\n"," \n","Abstract: b\"We present a method to learn a diverse group of object categories from an\\nunordered point set. We propose our Pyramid Point network, which uses a dense\\npyramid structure instead of the traditional 'U' shape, typically seen in\\nsemantic segmentation networks. This pyramid structure gives a second look,\\nallowing the network to revisit different layers simultaneously, increasing the\\ncontextual information by creating additional layers with less noise. We\\nintroduce a Focused Kernel Point convolution (FKP Conv), which expands on the\\ntraditional point convolutions by adding an attention mechanism to the kernel\\noutputs. This FKP Conv increases our feature quality and allows us to weigh the\\nkernel outputs dynamically. These FKP Convs are the central part of our\\nRecurrent FKP Bottleneck block, which makes up the backbone of our encoder.\\nWith this distinct network, we demonstrate competitive performance on three\\nbenchmark data sets. We also perform an ablation study to show the positive\\neffects of each element in our FKP Conv.\"\n","Label(s): ['cs.CV' 'cs.LG' 'cs.AI']\n"," \n","Abstract: b'Processing large point clouds is a challenging task. Therefore, the data is\\noften sampled to a size that can be processed more easily. The question is how\\nto sample the data? A popular sampling technique is Farthest Point Sampling\\n(FPS). However, FPS is agnostic to a downstream application (classification,\\nretrieval, etc.). The underlying assumption seems to be that minimizing the\\nfarthest point distance, as done by FPS, is a good proxy to other objective\\nfunctions.\\n  We show that it is better to learn how to sample. To do that, we propose a\\ndeep network to simplify 3D point clouds. The network, termed S-NET, takes a\\npoint cloud and produces a smaller point cloud that is optimized for a\\nparticular task. The simplified point cloud is not guaranteed to be a subset of\\nthe original point cloud. Therefore, we match it to a subset of the original\\npoints in a post-processing step. We contrast our approach with FPS by\\nexperimenting on two standard data sets and show significantly better results\\nfor a variety of applications. Our code is publicly available at:\\nhttps://github.com/orendv/learning_to_sample'\n","Label(s): ['cs.CV']\n"," \n","Abstract: b'Producing manual, pixel-accurate, image segmentation labels is tedious and\\ntime-consuming. This is often a rate-limiting factor when large amounts of\\nlabeled images are required, such as for training deep convolutional networks\\nfor instrument-background segmentation in surgical scenes. No large datasets\\ncomparable to industry standards in the computer vision community are available\\nfor this task. To circumvent this problem, we propose to automate the creation\\nof a realistic training dataset by exploiting techniques stemming from special\\neffects and harnessing them to target training performance rather than visual\\nappeal. Foreground data is captured by placing sample surgical instruments over\\na chroma key (a.k.a. green screen) in a controlled environment, thereby making\\nextraction of the relevant image segment straightforward. Multiple lighting\\nconditions and viewpoints can be captured and introduced in the simulation by\\nmoving the instruments and camera and modulating the light source. Background\\ndata is captured by collecting videos that do not contain instruments. In the\\nabsence of pre-existing instrument-free background videos, minimal labeling\\neffort is required, just to select frames that do not contain surgical\\ninstruments from videos of surgical interventions freely available online. We\\ncompare different methods to blend instruments over tissue and propose a novel\\ndata augmentation approach that takes advantage of the plurality of options. We\\nshow that by training a vanilla U-Net on semi-synthetic data only and applying\\na simple post-processing, we are able to match the results of the same network\\ntrained on a publicly available manually labeled real dataset.'\n","Label(s): ['cs.CV']\n"," \n"]}],"source":["text_batch, label_batch = next(iter(train_dataset))\n","\n","for i, text in enumerate(text_batch[:5]):\n","    label = label_batch[i].numpy()[None, ...]\n","    print(f\"Abstract: {text}\")\n","    print(f\"Label(s): {invert_multi_hot(label[0])}\")\n","    print(\" \")"]},{"cell_type":"code","source":["invert_multi_hot(label[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zSAuEGyjcuiX","executionInfo":{"status":"ok","timestamp":1664176171295,"user_tz":-540,"elapsed":393,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"b95fdcd3-f2bc-458e-8e41-40efdb266660"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['cs.CV'], dtype='<U40')"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"TZ-RhTDCaA_Q"},"source":["## Vectorization\n","\n","Before we feed the data to our model, we need to vectorize it (represent it in a numerical form).\n","For that purpose, we will use the\n","[`TextVectorization` layer](https://keras.io/api/layers/preprocessing_layers/text/text_vectorization).\n","It can operate as a part of your main model so that the model is excluded from the core\n","preprocessing logic. This greatly reduces the chances of training / serving skew during inference.\n","\n","We first calculate the number of unique words present in the abstracts."]},{"cell_type":"code","source":["vocabulary = set()\n","vocabulary.update(['a', 'ace', 'tea'])\n","vocabulary.update(['bee', 'bace', 'tie', 'a'])\n","vocabulary"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vyuRE4IGeKtW","executionInfo":{"status":"ok","timestamp":1664176171296,"user_tz":-540,"elapsed":10,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"87dd79d0-2b94-4df4-9a66-0eeeecd601db"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'a', 'ace', 'bace', 'bee', 'tea', 'tie'}"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["vocabulary = set()\n","for prefix in train_df[\"summaries\"].str.lower().str.split():\n","    vocabulary.update(prefix)\n","\n","vocabulary"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFphJ-5AdwBH","executionInfo":{"status":"ok","timestamp":1664176174439,"user_tz":-540,"elapsed":3149,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"f58590b1-2166-4de3-869a-b7eeffe51c3c"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'convo-lutional',\n"," 'square',\n"," 'raf-db;',\n"," 'campaign,',\n"," 'jhu-isi',\n"," 'ridnet.',\n"," '(ilvr),',\n"," 'attributes:',\n"," 'babies,',\n"," 'pendigits',\n"," 'uva',\n"," '$36\\\\%$',\n"," 'acceleration:',\n"," 'pixelbert',\n"," 'single-input.',\n"," 'https://ly-zhu.github.io/cof-net.',\n"," 'metro',\n"," '(hi-cmd)',\n"," 'retailer',\n"," 'temporal-relevant',\n"," 'dis-crepancy',\n"," 'undesired',\n"," 'mall,',\n"," 'multivariate-mab',\n"," 'object-information,',\n"," 'conus',\n"," 'bi-gru)',\n"," 'l-bfgs',\n"," 'leaky-integrate-fire',\n"," '(dis)',\n"," '5.72',\n"," 'toolchains',\n"," 'amosa,',\n"," 'truncated,',\n"," 'rl-pruner',\n"," 'truths',\n"," '(ero)',\n"," 'car.',\n"," 'https://github.com/jhl-hust/admix.',\n"," 'machines---are',\n"," '(0.33%).',\n"," 'ut-interaction',\n"," 'doubles',\n"," '(msfnet).',\n"," 'pulverizer',\n"," 'feature-rich',\n"," 'icdar.',\n"," 'lucid',\n"," '0%',\n"," 'youtube-objects',\n"," 'dietitians,',\n"," '(mar).',\n"," \"meaning's\",\n"," 'visually-relevant',\n"," 'parallel.',\n"," 'well-transformed',\n"," 'legr',\n"," \"error',\",\n"," '(attacking',\n"," 'caution.',\n"," '(lykouris',\n"," 'automata,',\n"," 'performs',\n"," '(tested',\n"," 'non-available',\n"," 'vci',\n"," 're-encoder',\n"," '(dsanls)',\n"," 'clamping,',\n"," 'schema',\n"," 'nmf.',\n"," 'function---a',\n"," 're-implementing',\n"," 'blow-up',\n"," 'ensembling',\n"," 'phase-coded',\n"," 'pac-man.',\n"," 'multi-sensing',\n"," 'differential-privacy-like',\n"," 'trace,',\n"," 'symbol-filling',\n"," 'flavor.',\n"," 'lc-harris.',\n"," '$600-700$',\n"," 'stability-based',\n"," '297,541',\n"," 'filter-bank',\n"," 'constrictions',\n"," 'mpdcompress',\n"," 'registries',\n"," '25\"',\n"," 'unfortunate',\n"," 'sub-spaces:',\n"," '(rnn-t)',\n"," '1.30',\n"," 'regimes:',\n"," 'acids',\n"," 'non-target,',\n"," '(tsn)',\n"," 'tcwae',\n"," '\\\\(96\\\\)',\n"," 'lupi',\n"," 'https://github.com/facebookresearch/nle.',\n"," 'landsat',\n"," '(snrs),',\n"," 'poorly-drawn-sketch',\n"," '(small-dense)',\n"," 'imitated',\n"," '[18],',\n"," '(hoc).',\n"," 'human-intelligible.',\n"," '96.45%',\n"," 'warehouse',\n"," 'misbelief',\n"," 'r2-b2-lite',\n"," 'mothers',\n"," 'morph',\n"," 'instabilities,',\n"," 'stored,',\n"," '(dmgn),',\n"," \"'system\",\n"," 'imprint',\n"," '~71%',\n"," 'operate/analyse',\n"," '(vice),',\n"," '(om-imagenet)',\n"," 'sgvb:',\n"," 'cough',\n"," '(typically',\n"," '(dof)',\n"," '(cse),',\n"," 'atlases.',\n"," 'stitch,',\n"," 'dac-mdps',\n"," 'eager',\n"," 'regulations,',\n"," 'labors.',\n"," '26%',\n"," 'general:',\n"," 'sites',\n"," 'optics,',\n"," 'per-time',\n"," 'coarse-fine',\n"," \"sampling'\",\n"," 'analogies',\n"," 'degree',\n"," 'underground',\n"," 'affinely',\n"," 'https://github.com/hrlblab/simtriple.',\n"," '2.7291,',\n"," 'tying',\n"," '2/d}\\\\mathrm{polylog}(k)$,',\n"," 'coevosage.',\n"," 'identity-consistency.',\n"," 'reissued,',\n"," 'observables.',\n"," 'inference/learning',\n"," 'sparse-rs',\n"," '(xcit)',\n"," 'adaptivity;',\n"," '83.9\\\\%,',\n"," '2d/\\\\alpha}',\n"," '(d-fcn)',\n"," '(sketch-photo',\n"," '`supervised',\n"," '$f:\\\\mathcal{x}',\n"," 'ow',\n"," '(ndi),',\n"," 'qd.',\n"," 'mechanics',\n"," '(wb-mri)',\n"," '(ota)',\n"," '(mgmn)',\n"," 'demolition)',\n"," '(ocmst)',\n"," 'doing?',\n"," 'pbp',\n"," 'a-pbs',\n"," '\\\\rangle$',\n"," 'references,',\n"," 'polarimetric',\n"," 'why,',\n"," 'unlikely.',\n"," 'topsis',\n"," '$(m\\\\leq',\n"," '(bmcogan)',\n"," 'microvessels',\n"," 'h-ndps',\n"," 'adgan',\n"," '(esl-net),',\n"," 'maximization).',\n"," 'flair,',\n"," '(youku-vesr)',\n"," '1,436,000',\n"," 'q;',\n"," 'omnisource',\n"," 'couple',\n"," 'calib.',\n"," 'https://github.com/berleon/when-explanations-lie',\n"," '+14%)',\n"," 'v-reid',\n"," 'https://github.com/felja633/dare.',\n"," '97.98%,',\n"," 'convexified',\n"," 'calculo',\n"," 'micro-structures',\n"," '(hudson',\n"," 'fewshot',\n"," 'unbiased',\n"," 'ncut-based',\n"," 'degradation-trend',\n"," 'convolution.',\n"," 'servers).',\n"," 'autobiographical',\n"," 'meausred',\n"," '\\\\url{https://mobiface.github.io/}.',\n"," 'reasoning}',\n"," 'dominate,',\n"," 'diffusion-reaction',\n"," 'odam,',\n"," 'accelerations',\n"," 'countries;',\n"," 'milcnn',\n"," 'demonstrably',\n"," 'b\".',\n"," '(graphrbm)',\n"," 'tetrahedrons.',\n"," 'fep',\n"," 'three)',\n"," 'guidelines.',\n"," 'celeba-hd',\n"," 'sp,',\n"," 'individuals',\n"," 'object/obstacles',\n"," 'privacy-preserved',\n"," 'agb',\n"," 'fsod.',\n"," 'identity-related',\n"," '\\\\emph{reliable}',\n"," 'finite-state',\n"," 'mixed-membership',\n"," 'abrupt',\n"," '65536-tile,',\n"," 'span.',\n"," 'https://github.com/jiaxinchen666/variational-scaling.',\n"," 'nano)',\n"," 'attacks\",',\n"," 'interstitial',\n"," 'multi-modality,',\n"," 'conda',\n"," 'hdl-32e',\n"," 'helmet-mounted',\n"," 'dre.',\n"," 'state-of-the-art',\n"," 'joint-embedding',\n"," 'unintelligible',\n"," '98.29%',\n"," '3rd',\n"," 'taddy',\n"," 'moda',\n"," 'histogram:',\n"," 'linearly.',\n"," 'interpetability,',\n"," 'dependable.',\n"," 'collision.',\n"," '87.3%,',\n"," 'plenoptic',\n"," '(depth),',\n"," '\\\\textsc{mgml}',\n"," 'continuous-categorical',\n"," '113,000',\n"," 'bodies,',\n"," 'geolocalization.',\n"," '(cil),',\n"," 'back.',\n"," 'insufficiency',\n"," 'bio-wearables,',\n"," 'educational;',\n"," '(mpo)',\n"," 'pcn',\n"," '1$),',\n"," 'hmdb51)',\n"," 'riognn',\n"," 'mri,',\n"," '(vrae)',\n"," '(2017);',\n"," 'configurability,',\n"," '(corgan),',\n"," 'fortress',\n"," 'tv-tv',\n"," '\"predicting',\n"," 'severity,',\n"," '(knn),',\n"," \"line's\",\n"," '(koh',\n"," 'decay,',\n"," 'latentcomponents.',\n"," '22mm,',\n"," 'image-to-depth',\n"," 'telecom',\n"," 'celtic',\n"," 'agency',\n"," '(due)',\n"," 'wrt',\n"," 'prolarimetric',\n"," 'helo.',\n"," 'tailor',\n"," '~69.1%',\n"," 'deep-layer',\n"," 'outperform}',\n"," 'logic-attention',\n"," 'results',\n"," 'partial-residual',\n"," '(pls)',\n"," 'square-ring',\n"," 'kowalski',\n"," 'radius/length',\n"," 'widespread',\n"," '(pa-gan)',\n"," 'mtgp',\n"," '(moments',\n"," 'gpca',\n"," 'sub-domains,',\n"," 'inimagenet',\n"," '7.5cm.',\n"," '127%',\n"," '(omwu)',\n"," 'parameter-selection',\n"," '\\\\{1,2,\\\\dots,n\\\\}$.',\n"," 'mfb',\n"," '(cadik',\n"," '31.2x).',\n"," 'muti-hop',\n"," 'constraints,',\n"," 'd2crealsr',\n"," 'chapters',\n"," 'credit-risk',\n"," 'modist',\n"," 'used---e.g.,',\n"," 'mcnn.',\n"," 'sky-cameras',\n"," 'catalogue',\n"," 'optnet-arl,',\n"," '(emdqn),',\n"," '2014).',\n"," 'm^3vsnet,',\n"," 'sum-of-norms',\n"," 'touch-points',\n"," '(\"dresser\"',\n"," 'rlight',\n"," 'modeled.',\n"," 'nh-asm',\n"," 'subgraph',\n"," 'broads',\n"," '(mh-gat)',\n"," 'single-colored',\n"," 'ophthalmologists.',\n"," 'hpnet',\n"," 'multi-voxel',\n"," 'artifact-suppression',\n"," 'totally',\n"," 'mog',\n"," 'https://github.com/whubaichuan/m3vsnet',\n"," 'metaphysical,',\n"," '2-d.',\n"," 'object-to-motion',\n"," \"'generalized\",\n"," 'memories,',\n"," 'chips',\n"," 'dme',\n"," 'waveforms',\n"," '(tps)',\n"," 'poly-gon',\n"," '(gmvc)',\n"," 'inception+svm',\n"," 'localisation.',\n"," 'judder)',\n"," 'sx-means',\n"," 'a3gan,',\n"," 'tg-gan',\n"," '(instance-subnet)',\n"," 'positive.',\n"," '1.17.',\n"," '(lasium),',\n"," 'https://github.com/martinpernus/maskfacegan.',\n"," 'ochuman',\n"," '\\\\textit{wdsr}',\n"," 'staging.',\n"," '(mn-pca)',\n"," 'p-values,',\n"," 'trellis-system',\n"," '$o(\\\\sqrt{n',\n"," '(p.s.d)',\n"," 'panoster,',\n"," 'holothurian,',\n"," '(ddd)',\n"," 'idea:',\n"," 'tdms',\n"," 'community;',\n"," 'readers,',\n"," '1,099',\n"," 'andretrieve',\n"," 'modeling),',\n"," 'vit-based',\n"," 'ihc',\n"," 'targets,',\n"," 'regularization/optimization',\n"," 'operational',\n"," 'strokes),',\n"," 'matlab.',\n"," 'voxel-point',\n"," 'max-flow/min-cut',\n"," 'consumes',\n"," 'https://github.com/umautobots/pedestrian_intent_action_detection.',\n"," 'bayes-stability',\n"," 'angle.',\n"," 'detect-and-read',\n"," 'evasions,',\n"," 'artigo',\n"," 'pattern.',\n"," '(http://www-sop.inria.fr/orion/etiseo)',\n"," '51,464',\n"," 'fim',\n"," 'infinite-action',\n"," 'toughest',\n"," 'detection/recognition',\n"," 'cwes',\n"," 'card).',\n"," '(dbs)',\n"," 'lesions),',\n"," 'queried',\n"," 'offering',\n"," 'object-',\n"," 'technology,autonomous',\n"," 'rts3d',\n"," '(spibb)',\n"," '(dis)similarity',\n"," '6.4',\n"," '\\\\times$',\n"," 'nswam',\n"," 'v-mem,',\n"," 'cruising',\n"," 'https://youtu.be/nxbwmzfrj5s',\n"," '6.11%',\n"," 'learnby',\n"," 'spacer,',\n"," '2-igns',\n"," 'fake-mage',\n"," 'post-harvesting',\n"," 'ilsvrc-2012.',\n"," '(chef),',\n"," 'el-2019,',\n"," 'letkf.',\n"," 'bubbly',\n"," 'vsb100',\n"," 'segmentation/estimation.',\n"," '`hog',\n"," '0.623',\n"," 'https://github.com/tanlab/convolutionmedicalner.',\n"," 'upgrading',\n"," 'investigated,',\n"," 'reserved',\n"," 'nineties.',\n"," '2-weisfeiler-lehman',\n"," '(street)',\n"," 'dermofit',\n"," 'neuromodulators',\n"," 'exceedingly',\n"," 'value}',\n"," 'utilitarian',\n"," 'pose-augmented',\n"," 'b$',\n"," '\"informative',\n"," '(bgm),',\n"," '12.7\\\\%',\n"," 'communication-aware',\n"," 'narrowed.',\n"," 'legal/security',\n"," 'misregistration',\n"," 'vhe',\n"," 'fcnn-based',\n"," 'designing,',\n"," '(ip)',\n"," 'nuisance-label',\n"," 'separated,',\n"," '(96%),',\n"," 'intentions',\n"," '73.2%/52.1%',\n"," 'hc-dyna,',\n"," 'efficienty',\n"," 'head),',\n"," 'floor',\n"," 'components:',\n"," 'chamber.',\n"," 'vlpac',\n"," '7,000+',\n"," '4k@29.61fps.',\n"," '(dex)',\n"," '(acsa)',\n"," 're-identification.',\n"," 'cgcnn,',\n"," 'ms/step',\n"," 'sequentiality.',\n"," '0.9720,',\n"," 'surgeon-specific',\n"," 'deploying',\n"," 'am,',\n"," 'satellites,',\n"," '(fc-lstm)',\n"," 'buffer',\n"," 'decrease,',\n"," 'how',\n"," 'biology.',\n"," '(defs),',\n"," 'batch)',\n"," '325m2',\n"," 'omnimatte',\n"," 'single-focus',\n"," 'angles.',\n"," 'gpu-days)',\n"," 'blue),',\n"," 'ard.',\n"," 'high-dimension',\n"," 'bnns',\n"," 'problema',\n"," '0.572',\n"," 'salientsleepnet,',\n"," '(mat),',\n"," 'freebase,',\n"," 'provisional-patented',\n"," 'laguerre/hermite',\n"," 'taylor,',\n"," 'subjectness',\n"," 'consuming',\n"," 'many:',\n"," 'plp-vio,',\n"," 'practical-relevant',\n"," '(fdtd)',\n"," 'chunk-wise',\n"," 'first-of-a-kind',\n"," '(oae)',\n"," '88.37%',\n"," 'once)',\n"," 'underexploited,',\n"," '(drl)',\n"," 'gated',\n"," 'layer),',\n"," 'ppo2',\n"," 'decision-score',\n"," 'univariate:',\n"," 'binarizes',\n"," 'cer',\n"," 'oa,',\n"," '\\\\cite{goodfellow2014generative}.',\n"," 'reconsider',\n"," 'subnetwork',\n"," 'low-compute',\n"," 'mobilenetv2.',\n"," 'representativeness,',\n"," 'dod,',\n"," 'feature-graph',\n"," 'ktm-drl',\n"," 'sicara,',\n"," 'dida,',\n"," '(pll)',\n"," '\\\\emph{functions},',\n"," '$\\\\mu_{\\\\operatorname{quasi-iso}}$',\n"," 'maresu-net.',\n"," 'https://github.com/hviktortsoi/acsc.git',\n"," 'finds',\n"," 'lesions,',\n"," 'similar-appearance',\n"," '$98\\\\%',\n"," 'foundations.',\n"," 'electro-encephalography',\n"," 'refining.',\n"," 'face-sue',\n"," 'st3d++,',\n"," '(ecb),',\n"," 'nie',\n"," 'addition-ality',\n"," 'sampling(fps)',\n"," 'diagnostically',\n"," 'nir,',\n"," 'masterprints.',\n"," 'arastirma',\n"," 'unobserved,',\n"," 'boosting).',\n"," '5%-8%,',\n"," '0.7261',\n"," 'custom,',\n"," 'maneuvers',\n"," 'point2sequence,',\n"," 'controlling.',\n"," 'tirg',\n"," '(kyc)',\n"," '3d-convnet',\n"," \"posl's\",\n"," '(cwnn)',\n"," '(dualhgcn)',\n"," 'in-distribution',\n"," 'minitaur',\n"," 'perceptrons)',\n"," '(not',\n"," 'inconsistency.',\n"," 'collusion.',\n"," 'haze-affected',\n"," '78.4%',\n"," '(accr),',\n"," 'fusing-splitting,',\n"," '(relu),',\n"," '2-12\\\\%',\n"," 'via:',\n"," 'non-rgb',\n"," 'failure,',\n"," 'priori</i>',\n"," 'ucsd',\n"," '\"plain',\n"," 'cosnet',\n"," '(analogous',\n"," 'tried-and-true',\n"," 'encoder-specific',\n"," 'ultra96',\n"," 'covariant.',\n"," 'indistinguishable.',\n"," 'whereabouts.',\n"," 'extractions',\n"," 'weak/strong.',\n"," 'issues.',\n"," '2$nd$',\n"," 'i5',\n"," '1.43x',\n"," 'min--max',\n"," 'stacked-mnist',\n"," 'edge-like',\n"," 'maskco',\n"," 'replicability',\n"," 'subgroups,',\n"," '(hoz)',\n"," 'method)',\n"," 'ins',\n"," 'non-volatile',\n"," 'valence.',\n"," '(dw-tnnr),',\n"," 'computation-heavy',\n"," '68.7%',\n"," 'if,',\n"," '(ppmf)',\n"," 'point-targets',\n"," 'language-to-language',\n"," 'discriminator-free',\n"," 'yolos',\n"," 'switching',\n"," '(vb-ucrl),',\n"," 'pan-sharpening)',\n"," '82.6\\\\%',\n"," 'facilitate',\n"," 'controversial',\n"," 'resource-bounded',\n"," 'haze-effects.',\n"," 'symptom/disease',\n"," 'bsd100,',\n"," 'relabelling',\n"," '6d.',\n"," '(0.147',\n"," '(zebrafish)',\n"," 'multiplesolution',\n"," 'understandable,',\n"," '\"x-former\"',\n"," '(color)',\n"," 'object-agnostic',\n"," '95/%',\n"," 'estimation-based',\n"," 'sample-costly',\n"," 'trained?',\n"," '(words,',\n"," 'two-fold.',\n"," 'svhn),',\n"," '(indefinite)',\n"," 'interpolation.',\n"," '97.47%',\n"," 'motifs:',\n"," 'single-illumination',\n"," '$\\\\theta(1/\\\\varepsilon)$',\n"," 'cvs.',\n"," 'sisr.',\n"," '(fc),',\n"," '(scb),',\n"," 'cifar10',\n"," 'structure;',\n"," 'non-invasiveness.',\n"," 'ucf11,',\n"," '62.1%',\n"," 'cds',\n"," 'lc-gnn',\n"," 'cifar-100-lt.',\n"," 'differencing',\n"," '(cnfgnn)',\n"," 'flow-deformation',\n"," 'articulatory',\n"," 'encouraged',\n"," 'revgnn-wide',\n"," 'unveiled',\n"," 'factual',\n"," 'human-interpretability',\n"," 'imagenet-scale',\n"," 'prevalent.',\n"," '$known\\\\',\n"," 'trasnfer',\n"," 'persons.',\n"," 'pattern,',\n"," 'attractor',\n"," 'assumption.the',\n"," 'multi-entropy',\n"," 'h3d.',\n"," 'meta-classifier',\n"," 'lvsc,',\n"," 'storytelling.',\n"," 'https://www.youtube.com/watch?v=w5mwsdwhcy4,',\n"," 'vegas.',\n"," '\\\\emph{representative-set',\n"," '(hssl),',\n"," 'v-structure,',\n"," 'nificant',\n"," 'plates.',\n"," 'explainers,',\n"," 'text8',\n"," 'workarounds',\n"," '(wfs)',\n"," 'shufflenet-v2+bft',\n"," '(supervised)',\n"," 'sub-action',\n"," 'sncf',\n"," 'expended',\n"," 'convtransformer',\n"," 'masked-convolution',\n"," '\\\\algo{linucb}~\\\\ccite{li2010contextual},',\n"," 'monolithic,',\n"," \"client's\",\n"," '(ehrs),',\n"," '$9.8\\\\times$',\n"," 'https://github.com/valeoai/mvrss.',\n"," 'instrument.',\n"," '(cayley)',\n"," 'heard',\n"," 'definitionally,',\n"," '(ps),',\n"," 'geodesic',\n"," '(aif),',\n"," 'lighting,',\n"," 'ctf',\n"," '\\\\footnote{our',\n"," 'administrator',\n"," '(fgsm,',\n"," 'attention,\"',\n"," 'complexification',\n"," 'normalization.',\n"," 'prototype,',\n"," 'compute-intensive',\n"," 'head-shoulder',\n"," 'cuboids',\n"," 'need-to-know',\n"," 'optimization}',\n"," 'caveats...',\n"," '(ttfnet).',\n"," '(effectively)',\n"," 'de-gans',\n"," 'faceshifter,',\n"," 'unbalancedly',\n"," '(simlr)',\n"," 'explaining,',\n"," 'gpu',\n"," 'round,',\n"," '(re-id)',\n"," '(i)landmark',\n"," 'articles),',\n"," 'anopheles',\n"," 'geographical,',\n"," 'control;',\n"," '3000',\n"," 'gf-attack.',\n"," 'casia-mfsd',\n"," '(sgep),',\n"," 'ppg-only',\n"," 'and.',\n"," 'affectthe',\n"," '(s)',\n"," 'campaigns),',\n"," 'remarkably',\n"," 'records,',\n"," 'measure-valued',\n"," '(datasets)',\n"," 'selfhar,',\n"," 'ppnp,',\n"," 'transportation.',\n"," 'learning}',\n"," '(ebgan)',\n"," 'implants',\n"," 'b-components',\n"," \"neuroradiologists'\",\n"," '\"lazy',\n"," 'markovian',\n"," '(domains',\n"," 'daedalus',\n"," '$\\\\tilde{o}(h^2\\\\sqrt{\\\\frac{\\\\mathcal{c}(\\\\phi)^2',\n"," 'attention(eca)',\n"," 'mf+ae:',\n"," \"`poor'\",\n"," 'durf',\n"," '(dcfod)',\n"," 'matching.',\n"," 'count,',\n"," 'mammal',\n"," 'it,',\n"," 'https://github.com/tiangexiang/bio-net.',\n"," 'value-accelerated',\n"," '(teacher',\n"," 'vq.',\n"," 'underlined',\n"," 'xfrnet',\n"," 'alphazero-like',\n"," 'vae-lime,',\n"," 'images.',\n"," '6.6%,',\n"," '(hrn)',\n"," '58,660',\n"," '$q(\\\\boldsymbol{g})$.',\n"," 'factorization,',\n"," 'pong.',\n"," 'testing',\n"," 'rollback,',\n"," 'nmac',\n"," 't5-xxl',\n"," 'vec2vec',\n"," 'pose/expression',\n"," 'believe.',\n"," 'fusionmapping.',\n"," 'concurrency,',\n"," 'meta-data.',\n"," '(cpus',\n"," 'packets,',\n"," '\\\\mbox{scope}~(\\\\mbox{pscope}),',\n"," \"one's\",\n"," 'https://github.com/sweichwald/tidybench',\n"," 'took',\n"," 'sees',\n"," \"``impression$\\\\to$click$\\\\to$purchase'',\",\n"," '(two-sided)',\n"," 'inclusive,',\n"," 'non-emvs.',\n"," 'kpi',\n"," 'any)',\n"," 'anchor-free.',\n"," '(lac)',\n"," 'stamp.',\n"," 'intuitive',\n"," 'contributes',\n"," 'lstm,',\n"," 'interfered,',\n"," 'opportunistically',\n"," 'lipschitz-constrained',\n"," 'r-mac.',\n"," 'magnitude-aware',\n"," 'pot',\n"," 'altitude:',\n"," 'compcars',\n"," 'raw-domain',\n"," 'l*a*b*',\n"," \"'impulsive\",\n"," 'tud-crossing',\n"," '3.05%',\n"," 'adasample,',\n"," '(sda),',\n"," '(dcn),',\n"," '(omd),',\n"," 'youtube-8m',\n"," 'labellings,',\n"," '(tr),',\n"," 'ill-posed.',\n"," 'probabilistic-classifier',\n"," 'https://shailaja183.github.io/vlqa/.',\n"," 'semi-metric,',\n"," 'teacher',\n"," 'phone,',\n"," 'attributable',\n"," '(multivariate-mab)',\n"," 'macro-scale',\n"," '256',\n"," 'techniques,',\n"," 'automatically-generated,',\n"," 'superglue),',\n"," 'team',\n"," '\"restore-from-restored.\"',\n"," '(cpsrs).',\n"," '5.8ghz',\n"," 'corrupt',\n"," 'datadriven',\n"," 'erasing.',\n"," 'conformer',\n"," 'regcgan',\n"," 'photovoltaics',\n"," 'deceitfulness',\n"," 'three-joint',\n"," 'generalizations,',\n"," 'weakly-labelled',\n"," 'scribbles),',\n"," 'bgs',\n"," 'imputed',\n"," '\"live\"',\n"," '0.28%',\n"," '(soms)',\n"," 'time-domain',\n"," '100.8',\n"," 'l_2',\n"," 'tosa',\n"," 'object-state.',\n"," 'surreptitiously',\n"," '(relaxed',\n"," 'linguistics;',\n"," 'vtab.',\n"," 'covariates.',\n"," 'mellitus),',\n"," 'ti.',\n"," 'knowledge\"',\n"," 'field-scale',\n"," '[1-3]',\n"," 'bilrp,',\n"," 'low-dimensional,',\n"," '(fixed)',\n"," 'domkl.',\n"," 'denseresnet',\n"," '(msc-multibox)',\n"," '$p_0$,',\n"," '56.6),',\n"," 'optidice',\n"," 'assaying',\n"," 'p.s.d',\n"," 'inspected,',\n"," 'rotation-attentive',\n"," '\\\\underline{l}ocal',\n"," 'treebank.',\n"," '(fpcm).',\n"," 'publicity',\n"," 'https://github.com/lorafib/lumipath',\n"," 'opportunities,',\n"," 'directives',\n"," '(hmt).',\n"," 'autood,',\n"," 'fulfilling',\n"," 'yahoo,',\n"," '$x_1,\\\\ldots,x_k$',\n"," 'needed,',\n"," 'fian',\n"," 'spends',\n"," 'context-specific',\n"," 'nmf).',\n"," 'two-stream,',\n"," '(pabm)',\n"," 'mixmix',\n"," 'parameters,e.g.intersection',\n"," 'degree-aware,',\n"," 'non-real',\n"," 'https://github.com/alvinwan/neural-backed-decision-trees.',\n"," 'palette.',\n"," 'test:',\n"," 'oid',\n"," 'width-dependent',\n"," 'rtx1080ti',\n"," 'https://github.com/jeffrey-ede/adaptive-scans',\n"," '(mmbm)',\n"," \"subscribers'\",\n"," 'meta-modeling,',\n"," 'single-shuffle,',\n"," 'down-scaling',\n"," '(xlvins),',\n"," 'end-user,',\n"," 'modality:',\n"," 'video-query',\n"," 'automatically-generated',\n"," 'iconn_index.',\n"," 'predicate-aware',\n"," 'python/numpy',\n"," 'around?',\n"," 'hyperdimensional',\n"," '{\\\\url{https://github.com/arghosh/noisy_label_pretrain}}.',\n"," 'vnet,',\n"," 'meta-sgd,',\n"," 'learning-from-scratch',\n"," 'dcnns',\n"," 'cpvt',\n"," '(2.5-d)',\n"," 'imgage',\n"," 'sidd',\n"," 'recurrent-based',\n"," 'morph-ii',\n"," '(1998))',\n"," 'premises',\n"," 'argued',\n"," 'events.',\n"," 'ambient,',\n"," ...}"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","execution_count":29,"metadata":{"id":"Lrsv-bB0aA_T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176177238,"user_tz":-540,"elapsed":2808,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"53183845-2e03-4495-9347-0f93591fd6ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["153365\n"]}],"source":["# Source: https://stackoverflow.com/a/18937309/7636462\n","vocabulary = set()\n","train_df[\"summaries\"].str.lower().str.split().apply(vocabulary.update)\n","vocabulary_size = len(vocabulary)\n","print(vocabulary_size)"]},{"cell_type":"markdown","metadata":{"id":"S3kcE8ahaA_T"},"source":["We now create our vectorization layer and `map()` to the `tf.data.Dataset`s created\n","earlier.\n","\n","토큰의 구성\n","- 토큰: 분석하려는 의미의 최소단위\n","- 토큰의 대상: 자소, 문자, 단어, 어구, 문단, 문장\n","- unigram: 한 단어로 의미의 최소단위(토큰)를 구성하는 방법\n","- bigram: 연속된 두 단어로 의미의 최소단위(토큰)를 구성하는 방법\n","- trigram: 연속된 세 단어로 의미의 최소단위(토큰)를 구성하는 방법\n","\n","벡터라이제이션:\n","- one-hot 표현: 어떤 단어를 사전의 one-hot 벡터로 표현. (n, max_len, n_vocab)\n","- 빈도테이블: 각 문장에 있는 단어의 출현 빈도 (n, n_vocab)\n","- 출현여부테이블: 각 문장에 있는 단어의 출현 여부 (n, n_vocab)\n","- tf-idf 테이블: 문장에서 단어의 중요도를 평가 tf/idf (n, n_vocab)\n","    - tf(term frequency) : 빈도테이블\n","    - idf(inverse document freq): 다른 문장에서의 출현 횟수"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"E_6PK2AxaA_U","executionInfo":{"status":"ok","timestamp":1664176219518,"user_tz":-540,"elapsed":42288,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}}},"outputs":[],"source":["text_vectorizer = layers.TextVectorization(\n","    max_tokens=vocabulary_size, ngrams=2, output_mode=\"tf_idf\"\n",")\n","\n","# `TextVectorization` layer needs to be adapted as per the vocabulary from our\n","# training set.\n","with tf.device(\"/CPU:0\"):\n","    text_vectorizer.adapt(train_dataset.map(lambda text, label: text))\n","\n","train_dataset = train_dataset.map(\n","    lambda text, label: (text_vectorizer(text), label), num_parallel_calls=auto\n",").prefetch(auto)\n","validation_dataset = validation_dataset.map(\n","    lambda text, label: (text_vectorizer(text), label), num_parallel_calls=auto\n",").prefetch(auto)\n","test_dataset = test_dataset.map(\n","    lambda text, label: (text_vectorizer(text), label), num_parallel_calls=auto\n",").prefetch(auto)"]},{"cell_type":"markdown","metadata":{"id":"qxoj8qqfaA_U"},"source":["A batch of raw text will first go through the `TextVectorization` layer and it will\n","generate their integer representations. Internally, the `TextVectorization` layer will\n","first create bi-grams out of the sequences and then represent them using\n","[TF-IDF](https://wikipedia.org/wiki/Tf%E2%80%93idf). The output representations will then\n","be passed to the shallow model responsible for text classification.\n","\n","To learn more about other possible configurations with `TextVectorizer`, please consult\n","the\n","[official documentation](https://keras.io/api/layers/preprocessing_layers/text/text_vectorization).\n","\n","**Note**: Setting the `max_tokens` argument to a pre-calculated vocabulary size is\n","not a requirement."]},{"cell_type":"markdown","metadata":{"id":"2XUG_wfkaA_V"},"source":["## Create a text classification model\n","\n","We will keep our model simple -- it will be a small stack of fully-connected layers with\n","ReLU as the non-linearity."]},{"cell_type":"code","execution_count":32,"metadata":{"id":"bLiMSS_2aA_V","executionInfo":{"status":"ok","timestamp":1664176423579,"user_tz":-540,"elapsed":366,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}}},"outputs":[],"source":["# 153개의 multi-class 에 대해 각각의 문장이 각각의 item에 속하는 지를 분류\n","def make_model():\n","    shallow_mlp_model = keras.Sequential(\n","        [\n","            layers.Dense(512, activation=\"relu\"),\n","            layers.Dense(256, activation=\"relu\"),\n","            layers.Dense(lookup.vocabulary_size(), activation=\"sigmoid\"),\n","        ]  # More on why \"sigmoid\" has been used here in a moment.\n","    )\n","    return shallow_mlp_model"]},{"cell_type":"markdown","metadata":{"id":"j3svwlZGaA_W"},"source":["## Train the model\n","\n","We will train our model using the binary crossentropy loss. This is because the labels\n","are not disjoint. For a given abstract, we may have multiple categories. So, we will\n","divide the prediction task into a series of multiple binary classification problems. This\n","is also why we kept the activation function of the classification layer in our model to\n","sigmoid. Researchers have used other combinations of loss function and activation\n","function as well. For example, in\n","[Exploring the Limits of Weakly Supervised Pretraining](https://arxiv.org/abs/1805.00932),\n","Mahajan et al. used the softmax activation function and cross-entropy loss to train\n","their models."]},{"cell_type":"code","execution_count":33,"metadata":{"id":"kcIy1qncaA_W","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1664176764479,"user_tz":-540,"elapsed":340282,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"5c532191-fec3-48f6-8976-055f6722f8b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","258/258 [==============================] - 17s 53ms/step - loss: 0.0326 - categorical_accuracy: 0.8520 - val_loss: 0.0189 - val_categorical_accuracy: 0.9013\n","Epoch 2/20\n","258/258 [==============================] - 13s 50ms/step - loss: 0.0033 - categorical_accuracy: 0.8712 - val_loss: 0.0262 - val_categorical_accuracy: 0.8636\n","Epoch 3/20\n","258/258 [==============================] - 13s 50ms/step - loss: 8.6016e-04 - categorical_accuracy: 0.8362 - val_loss: 0.0331 - val_categorical_accuracy: 0.8549\n","Epoch 4/20\n","258/258 [==============================] - 14s 54ms/step - loss: 3.6345e-04 - categorical_accuracy: 0.8166 - val_loss: 0.0370 - val_categorical_accuracy: 0.8554\n","Epoch 5/20\n","258/258 [==============================] - 13s 51ms/step - loss: 1.8358e-04 - categorical_accuracy: 0.8024 - val_loss: 0.0406 - val_categorical_accuracy: 0.8620\n","Epoch 6/20\n","258/258 [==============================] - 13s 50ms/step - loss: 1.2054e-04 - categorical_accuracy: 0.8011 - val_loss: 0.0419 - val_categorical_accuracy: 0.8456\n","Epoch 7/20\n","258/258 [==============================] - 13s 50ms/step - loss: 7.8954e-05 - categorical_accuracy: 0.8079 - val_loss: 0.0447 - val_categorical_accuracy: 0.8609\n","Epoch 8/20\n","258/258 [==============================] - 13s 50ms/step - loss: 7.2208e-05 - categorical_accuracy: 0.8206 - val_loss: 0.0450 - val_categorical_accuracy: 0.8642\n","Epoch 9/20\n","258/258 [==============================] - 15s 58ms/step - loss: 6.1985e-05 - categorical_accuracy: 0.8150 - val_loss: 0.0471 - val_categorical_accuracy: 0.8489\n","Epoch 10/20\n","258/258 [==============================] - 13s 50ms/step - loss: 4.4255e-05 - categorical_accuracy: 0.8150 - val_loss: 0.0481 - val_categorical_accuracy: 0.8620\n","Epoch 11/20\n","258/258 [==============================] - 17s 65ms/step - loss: 5.6150e-05 - categorical_accuracy: 0.8214 - val_loss: 0.0477 - val_categorical_accuracy: 0.8603\n","Epoch 12/20\n","258/258 [==============================] - 13s 51ms/step - loss: 9.9583e-05 - categorical_accuracy: 0.8229 - val_loss: 0.0502 - val_categorical_accuracy: 0.8707\n","Epoch 13/20\n","258/258 [==============================] - 15s 57ms/step - loss: 6.7136e-04 - categorical_accuracy: 0.8189 - val_loss: 0.0450 - val_categorical_accuracy: 0.8172\n","Epoch 14/20\n","258/258 [==============================] - 13s 51ms/step - loss: 0.0021 - categorical_accuracy: 0.8189 - val_loss: 0.0390 - val_categorical_accuracy: 0.8652\n","Epoch 15/20\n","258/258 [==============================] - 16s 60ms/step - loss: 0.0017 - categorical_accuracy: 0.8180 - val_loss: 0.0458 - val_categorical_accuracy: 0.8576\n","Epoch 16/20\n","258/258 [==============================] - 15s 58ms/step - loss: 8.4139e-04 - categorical_accuracy: 0.7808 - val_loss: 0.0517 - val_categorical_accuracy: 0.8396\n","Epoch 17/20\n","258/258 [==============================] - 14s 53ms/step - loss: 4.3810e-04 - categorical_accuracy: 0.7558 - val_loss: 0.0566 - val_categorical_accuracy: 0.8303\n","Epoch 18/20\n","258/258 [==============================] - 13s 51ms/step - loss: 2.5000e-04 - categorical_accuracy: 0.7575 - val_loss: 0.0597 - val_categorical_accuracy: 0.8063\n","Epoch 19/20\n","258/258 [==============================] - 16s 61ms/step - loss: 1.6861e-04 - categorical_accuracy: 0.7566 - val_loss: 0.0587 - val_categorical_accuracy: 0.8221\n","Epoch 20/20\n","258/258 [==============================] - 15s 58ms/step - loss: 1.4944e-04 - categorical_accuracy: 0.7389 - val_loss: 0.0634 - val_categorical_accuracy: 0.8134\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["epochs = 20\n","\n","shallow_mlp_model = make_model()\n","shallow_mlp_model.compile(\n","    loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"categorical_accuracy\"]\n",")\n","\n","history = shallow_mlp_model.fit(\n","    train_dataset, validation_data=validation_dataset, epochs=epochs\n",")\n","\n","\n","def plot_result(item):\n","    plt.plot(history.history[item], label=item)\n","    plt.plot(history.history[\"val_\" + item], label=\"val_\" + item)\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(item)\n","    plt.title(\"Train and Validation {} Over Epochs\".format(item), fontsize=14)\n","    plt.legend()\n","    plt.grid()\n","    plt.show()\n","\n","\n","plot_result(\"loss\")\n","plot_result(\"categorical_accuracy\")"]},{"cell_type":"markdown","metadata":{"id":"T4fTM6bWaA_Z"},"source":["While training, we notice an initial sharp fall in the loss followed by a gradual decay."]},{"cell_type":"markdown","metadata":{"id":"2-z0ulB9aA_Z"},"source":["### Evaluate the model"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"q3Aap9A6aA_Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176884071,"user_tz":-540,"elapsed":1926,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"a038ed8f-71f8-4465-d2c8-c6f170d3220c"},"outputs":[{"output_type":"stream","name":"stdout","text":["15/15 [==============================] - 1s 39ms/step - loss: 0.0594 - categorical_accuracy: 0.8260\n","Categorical accuracy on the test set: 82.6%.\n"]}],"source":["_, categorical_acc = shallow_mlp_model.evaluate(test_dataset)\n","print(f\"Categorical accuracy on the test set: {round(categorical_acc * 100, 2)}%.\")"]},{"cell_type":"markdown","metadata":{"id":"FOyG4zBBaA_a"},"source":["The trained model gives us an evaluation accuracy of ~87%."]},{"cell_type":"markdown","metadata":{"id":"uGP5lX20aA_a"},"source":["## Inference\n","\n","An important feature of the\n","[preprocessing layers provided by Keras](https://keras.io/guides/preprocessing_layers/)\n","is that they can be included inside a `tf.keras.Model`. We will export an inference model\n","by including the `text_vectorization` layer on top of `shallow_mlp_model`. This will\n","allow our inference model to directly operate on raw strings.\n","\n","**Note** that during training it is always preferable to use these preprocessing\n","layers as a part of the data input pipeline rather than the model to avoid\n","surfacing bottlenecks for the hardware accelerators. This also allows for\n","asynchronous data processing."]},{"cell_type":"code","execution_count":35,"metadata":{"id":"jnCBfOn0aA_a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664176892731,"user_tz":-540,"elapsed":1143,"user":{"displayName":"Oseong Kwon","userId":"14837275687392158374"}},"outputId":"0379c8e2-3554-497d-dd12-1ee87c78544c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Abstract: b'Severe weather events can cause large financial losses to farmers. Detailed\\ninformation on the location and severity of damage will assist farmers,\\ninsurance companies, and disaster response agencies in making wise post-damage\\ndecisions. The goal of this study was a proof-of-concept to detect damaged crop\\nareas from aerial imagery using computer vision and deep learning techniques. A\\nspecific objective was to compare existing object detection algorithms to\\ndetermine which was best suited for crop damage detection. Two modes of crop\\ndamage common in maize (corn) production were simulated: stalk lodging at the\\nlowest ear and stalk lodging at ground level. Simulated damage was used to\\ncreate a training and analysis data set. An unmanned aerial system (UAS)\\nequipped with a RGB camera was used for image acquisition. Three popular object\\ndetectors (Faster R-CNN, YOLOv2, and RetinaNet) were assessed for their ability\\nto detect damaged regions in a field. Average precision was used to compare\\nobject detectors. YOLOv2 and RetinaNet were able to detect crop damage across\\nmultiple late-season growth stages. Faster R-CNN was not successful as the\\nother two advanced detectors. Detecting crop damage at later growth stages was\\nmore difficult for all tested object detectors. Weed pressure in simulated\\ndamage plots and increased target density added additional complexity.'\n","Label(s): ['cs.CV' 'cs.LG' 'eess.IV']\n","Predicted Label(s): (cs.CV, eess.IV, cs.CY)\n"," \n","Abstract: b\"Self-supervised learning and data augmentation have significantly reduced the\\nperformance gap between state and image-based reinforcement learning agents in\\ncontinuous control tasks. However, it is still unclear whether current\\ntechniques can face a variety of visual conditions required by real-world\\nenvironments. We propose a challenging benchmark that tests agents' visual\\ngeneralization by adding graphical variety to existing continuous control\\ndomains. Our empirical analysis shows that current methods struggle to\\ngeneralize across a diverse set of visual changes, and we examine the specific\\nfactors of variation that make these tasks difficult. We find that data\\naugmentation techniques outperform self-supervised learning approaches and that\\nmore significant image transformations provide better visual generalization\\n\\\\footnote{The benchmark and our augmented actor-critic implementation are\\nopen-sourced @ https://github.com/QData/dmc_remastered)\"\n","Label(s): ['cs.CV' 'cs.LG' 'cs.AI' 'cs.RO']\n","Predicted Label(s): (cs.LG, cs.AI, cs.CV)\n"," \n","Abstract: b'The visual attributes of cells, such as the nuclear morphology and chromatin\\nopenness, are critical for histopathology image analysis. By learning\\ncell-level visual representation, we can obtain a rich mix of features that are\\nhighly reusable for various tasks, such as cell-level classification, nuclei\\nsegmentation, and cell counting. In this paper, we propose a unified generative\\nadversarial networks architecture with a new formulation of loss to perform\\nrobust cell-level visual representation learning in an unsupervised setting.\\nOur model is not only label-free and easily trained but also capable of\\ncell-level unsupervised classification with interpretable visualization, which\\nachieves promising results in the unsupervised classification of bone marrow\\ncellular components. Based on the proposed cell-level visual representation\\nlearning, we further develop a pipeline that exploits the varieties of cellular\\nelements to perform histopathology image classification, the advantages of\\nwhich are demonstrated on bone marrow datasets.'\n","Label(s): ['cs.CV']\n","Predicted Label(s): (cs.CV, stat.ML, cs.LG)\n"," \n","Abstract: b'Recurrent Neural Networks (RNNs) have been widely used in sequence analysis\\nand modeling. However, when processing high-dimensional data, RNNs typically\\nrequire very large model sizes, thereby bringing a series of deployment\\nchallenges. Although the state-of-the-art tensor decomposition approaches can\\nprovide good model compression performance, these existing methods are still\\nsuffering some inherent limitations, such as restricted representation\\ncapability and insufficient model complexity reduction. To overcome these\\nlimitations, in this paper we propose to develop compact RNN models using\\nHierarchical Tucker (HT) decomposition. HT decomposition brings strong\\nhierarchical structure to the decomposed RNN models, which is very useful and\\nimportant for enhancing the representation capability. Meanwhile, HT\\ndecomposition provides higher storage and computational cost reduction than the\\nexisting tensor decomposition approaches for RNN compression. Our experimental\\nresults show that, compared with the state-of-the-art compressed RNN models,\\nsuch as TT-LSTM, TR-LSTM and BT-LSTM, our proposed HT-based LSTM (HT-LSTM),\\nconsistently achieves simultaneous and significant increases in both\\ncompression ratio and test accuracy on different datasets.'\n","Label(s): ['cs.LG' 'stat.ML']\n","Predicted Label(s): (cs.LG, cs.CV, cs.AI)\n"," \n","Abstract: b'Single Image Super Resolution (SISR) is the process of mapping a\\nlow-resolution image to a high resolution image. This inherently has\\napplications in remote sensing as a way to increase the spatial resolution in\\nsatellite imagery. This suggests a possible improvement to automated target\\nrecognition in image classification and object detection. We explore the effect\\nthat different training sets have on SISR with the network, Super Resolution\\nGenerative Adversarial Network (SRGAN). We train 5 SRGANs on different land-use\\nclasses (e.g. agriculture, cities, ports) and test them on the same unseen\\ndataset. We attempt to find the qualitative and quantitative differences in\\nSISR, binary classification, and object detection performance. We find that\\ncurated training sets that contain objects in the test ontology perform better\\non both computer vision tasks while having a complex distribution of images\\nallows object detection models to perform better. However, Super Resolution\\n(SR) might not be beneficial to certain problems and will see a diminishing\\namount of returns for datasets that are closer to being solved.'\n","Label(s): ['cs.CV']\n","Predicted Label(s): (cs.CV, cs.GR, eess.IV)\n"," \n"]}],"source":["# Create a model for inference.\n","model_for_inference = keras.Sequential([text_vectorizer, shallow_mlp_model])\n","\n","# Create a small dataset just for demoing inference.\n","inference_dataset = make_dataset(test_df.sample(100), is_train=False)\n","text_batch, label_batch = next(iter(inference_dataset))\n","predicted_probabilities = model_for_inference.predict(text_batch)\n","\n","# Perform inference.\n","for i, text in enumerate(text_batch[:5]):\n","    label = label_batch[i].numpy()[None, ...]\n","    print(f\"Abstract: {text}\")\n","    print(f\"Label(s): {invert_multi_hot(label[0])}\")\n","    predicted_proba = [proba for proba in predicted_probabilities[i]]\n","    top_3_labels = [\n","        x\n","        for _, x in sorted(\n","            zip(predicted_probabilities[i], lookup.get_vocabulary()),\n","            key=lambda pair: pair[0],\n","            reverse=True,\n","        )\n","    ][:3]\n","    print(f\"Predicted Label(s): ({', '.join([label for label in top_3_labels])})\")\n","    print(\" \")"]},{"cell_type":"markdown","metadata":{"id":"3IDusLOtaA_a"},"source":["The prediction results are not that great but not below the par for a simple model like\n","ours. We can improve this performance with models that consider word order like LSTM or\n","even those that use Transformers ([Vaswani et al.](https://arxiv.org/abs/1706.03762))."]},{"cell_type":"markdown","metadata":{"id":"1fKLjwOoaA_b"},"source":["## Acknowledgements\n","\n","We would like to thank [Matt Watson](https://github.com/mattdangerw) for helping us\n","tackle the multi-label binarization part and inverse-transforming the processed labels\n","to the original form."]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/multi_label_classification.ipynb","timestamp":1663904009705}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}